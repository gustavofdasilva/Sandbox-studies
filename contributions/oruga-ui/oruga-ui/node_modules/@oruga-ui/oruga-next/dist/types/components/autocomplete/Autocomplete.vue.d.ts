import { type PropType } from "vue";
import type { ComponentClass, DynamicComponent } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    /** Override existing theme classes completely */
    override: {
        type: BooleanConstructor;
        default: any;
    };
    /** @model */
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    /** Input type */
    type: {
        type: StringConstructor;
        default: string;
    };
    /** Menu tag name */
    menuTag: {
        type: PropType<DynamicComponent>;
        default: () => DynamicComponent;
    };
    /** Menu item tag name */
    itemTag: {
        type: PropType<DynamicComponent>;
        default: () => DynamicComponent;
    };
    /** Options / suggestions */
    data: {
        type: ArrayConstructor;
        default: () => any[];
    };
    /**
     * Size of the control
     * @values small, medium, large
     */
    size: {
        type: StringConstructor;
        default: () => unknown;
    };
    /**
     * Position of the dropdown
     * @values auto, top, bottom
     */
    position: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    /** Property of the object (if data is array of objects) to use as display text, and to keep track of selected option */
    field: {
        type: StringConstructor;
        default: any;
    };
    /** Property of the object (if `data` is array of objects) to use as display text of group */
    groupField: {
        type: StringConstructor;
        default: any;
    };
    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */
    groupOptions: {
        type: StringConstructor;
        default: any;
    };
    /** Function to format an option to a string for display in the input (as alternative to field prop) */
    formatter: {
        type: PropType<(value: string | number) => string | number>;
        default: any;
    };
    /** Input placeholder */
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    /** Makes input full width when inside a grouped or addon field */
    expanded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Makes the element rounded */
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Same as native input disabled */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Same as native maxlength, plus character counter */
    maxlength: {
        type: NumberConstructor;
        default: any;
    };
    /** Makes the component check if list reached scroll start or end and emit scroll events. */
    checkScroll: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Number of milliseconds to delay before to emit input event */
    debounce: {
        type: NumberConstructor;
        default: () => number;
    };
    /** The first option will always be pre-selected (easier to just hit enter or tab) */
    keepFirst: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Clear input text on select */
    clearOnSelect: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Open dropdown list on focus */
    openOnFocus: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Keep open dropdown list after select */
    keepOpen: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Max height of dropdown content */
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => unknown;
    };
    /** Array of keys (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) which will add a tag when typing (default tab and enter) */
    confirmKeys: {
        type: ArrayConstructor;
        default: () => string[];
    };
    /** Dropdown content (items) are shown into a modal on mobile */
    mobileModal: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Transition name to apply on dropdown list */
    animation: {
        type: StringConstructor;
        default: () => string;
    };
    /** Trigger the select event for the first pre-selected option when clicking outside and `keep-first` is enabled */
    selectOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allows the header in the autocomplete to be selectable */
    selectableHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allows the footer in the autocomplete to be selectable */
    selectableFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Icon pack to use
     * @values mdi, fa, fas and any other custom icon pack
     */
    iconPack: {
        type: StringConstructor;
        default: () => any;
    };
    /** Icon to be shown */
    icon: {
        type: StringConstructor;
        default: () => any;
    };
    /** Makes the icon clickable */
    iconClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Icon to be added on the right side */
    iconRight: {
        type: StringConstructor;
        default: () => any;
    };
    /** Make the icon right clickable */
    iconRightClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Variant of right icon */
    iconRightVariant: {
        type: StringConstructor;
        default: any;
    };
    /** Add a button/icon to clear the inputed text */
    clearable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Icon name to be added on the clear button */
    clearIcon: {
        type: StringConstructor;
        default: () => string;
    };
    /** Show status icon using field and variant prop */
    statusIcon: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Native options to use in HTML5 validation */
    autocomplete: {
        type: StringConstructor;
        default: () => string;
    };
    /** Enable html 5 native validation */
    useHtml5Validation: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** The message which is shown when a validation error occurs */
    validationMessage: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Append the component to another part of the DOM.
     * Set `true` to append the component to the body.
     * In addition, any CSS selector string or an actual DOM node can be used.
     */
    teleport: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor)[];
        default: () => boolean;
    };
    /** Class of the root element */
    rootClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu items */
    itemClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu items on hover */
    itemHoverClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu items group title */
    itemGroupTitleClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu empty placeholder item */
    itemEmptyClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu header item */
    itemHeaderClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu footer item */
    itemFooterClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /**
     * Classes to apply on internal input component
     * @ignore
     */
    inputClasses: {
        type: ObjectConstructor;
        default: () => {};
    };
}, {
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string | number) => void;
    input: (value: string | number) => void;
    select: (value: string | number, evt: Event) => void;
    "select-header": (event: Event) => void;
    "select-footer": (event: Event) => void;
    focus: (event: Event) => void;
    blur: (event: Event) => void;
    invalid: (event: Event) => void;
    "icon-click": (event: Event) => void;
    "icon-right-click": (event: Event) => void;
    "scroll-start": () => void;
    "scroll-end": () => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /** Override existing theme classes completely */
    override: {
        type: BooleanConstructor;
        default: any;
    };
    /** @model */
    modelValue: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    /** Input type */
    type: {
        type: StringConstructor;
        default: string;
    };
    /** Menu tag name */
    menuTag: {
        type: PropType<DynamicComponent>;
        default: () => DynamicComponent;
    };
    /** Menu item tag name */
    itemTag: {
        type: PropType<DynamicComponent>;
        default: () => DynamicComponent;
    };
    /** Options / suggestions */
    data: {
        type: ArrayConstructor;
        default: () => any[];
    };
    /**
     * Size of the control
     * @values small, medium, large
     */
    size: {
        type: StringConstructor;
        default: () => unknown;
    };
    /**
     * Position of the dropdown
     * @values auto, top, bottom
     */
    position: {
        type: StringConstructor;
        default: () => string;
        validator: (value: string) => boolean;
    };
    /** Property of the object (if data is array of objects) to use as display text, and to keep track of selected option */
    field: {
        type: StringConstructor;
        default: any;
    };
    /** Property of the object (if `data` is array of objects) to use as display text of group */
    groupField: {
        type: StringConstructor;
        default: any;
    };
    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */
    groupOptions: {
        type: StringConstructor;
        default: any;
    };
    /** Function to format an option to a string for display in the input (as alternative to field prop) */
    formatter: {
        type: PropType<(value: string | number) => string | number>;
        default: any;
    };
    /** Input placeholder */
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    /** Makes input full width when inside a grouped or addon field */
    expanded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Makes the element rounded */
    rounded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Same as native input disabled */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Same as native maxlength, plus character counter */
    maxlength: {
        type: NumberConstructor;
        default: any;
    };
    /** Makes the component check if list reached scroll start or end and emit scroll events. */
    checkScroll: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Number of milliseconds to delay before to emit input event */
    debounce: {
        type: NumberConstructor;
        default: () => number;
    };
    /** The first option will always be pre-selected (easier to just hit enter or tab) */
    keepFirst: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Clear input text on select */
    clearOnSelect: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Open dropdown list on focus */
    openOnFocus: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Keep open dropdown list after select */
    keepOpen: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Max height of dropdown content */
    maxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: () => unknown;
    };
    /** Array of keys (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values) which will add a tag when typing (default tab and enter) */
    confirmKeys: {
        type: ArrayConstructor;
        default: () => string[];
    };
    /** Dropdown content (items) are shown into a modal on mobile */
    mobileModal: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Transition name to apply on dropdown list */
    animation: {
        type: StringConstructor;
        default: () => string;
    };
    /** Trigger the select event for the first pre-selected option when clicking outside and `keep-first` is enabled */
    selectOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allows the header in the autocomplete to be selectable */
    selectableHeader: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allows the footer in the autocomplete to be selectable */
    selectableFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Icon pack to use
     * @values mdi, fa, fas and any other custom icon pack
     */
    iconPack: {
        type: StringConstructor;
        default: () => any;
    };
    /** Icon to be shown */
    icon: {
        type: StringConstructor;
        default: () => any;
    };
    /** Makes the icon clickable */
    iconClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Icon to be added on the right side */
    iconRight: {
        type: StringConstructor;
        default: () => any;
    };
    /** Make the icon right clickable */
    iconRightClickable: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Variant of right icon */
    iconRightVariant: {
        type: StringConstructor;
        default: any;
    };
    /** Add a button/icon to clear the inputed text */
    clearable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Icon name to be added on the clear button */
    clearIcon: {
        type: StringConstructor;
        default: () => string;
    };
    /** Show status icon using field and variant prop */
    statusIcon: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Native options to use in HTML5 validation */
    autocomplete: {
        type: StringConstructor;
        default: () => string;
    };
    /** Enable html 5 native validation */
    useHtml5Validation: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** The message which is shown when a validation error occurs */
    validationMessage: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Append the component to another part of the DOM.
     * Set `true` to append the component to the body.
     * In addition, any CSS selector string or an actual DOM node can be used.
     */
    teleport: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor)[];
        default: () => boolean;
    };
    /** Class of the root element */
    rootClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu items */
    itemClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu items on hover */
    itemHoverClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu items group title */
    itemGroupTitleClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu empty placeholder item */
    itemEmptyClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu header item */
    itemHeaderClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the menu footer item */
    itemFooterClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /**
     * Classes to apply on internal input component
     * @ignore
     */
    inputClasses: {
        type: ObjectConstructor;
        default: () => {};
    };
}>> & {
    onInput?: (value: string | number) => any;
    onSelect?: (value: string | number, evt: Event) => any;
    onBlur?: (event: Event) => any;
    onFocus?: (event: Event) => any;
    onInvalid?: (event: Event) => any;
    "onUpdate:modelValue"?: (value: string | number) => any;
    "onSelect-header"?: (event: Event) => any;
    "onSelect-footer"?: (event: Event) => any;
    "onIcon-click"?: (event: Event) => any;
    "onIcon-right-click"?: (event: Event) => any;
    "onScroll-start"?: () => any;
    "onScroll-end"?: () => any;
}, {
    data: unknown[];
    size: string;
    override: boolean;
    iconPack: string;
    useHtml5Validation: boolean;
    statusIcon: boolean;
    type: string;
    modelValue: string | number;
    field: string;
    rootClass: ComponentClass;
    validationMessage: string;
    menuTag: DynamicComponent;
    itemTag: DynamicComponent;
    position: string;
    groupField: string;
    groupOptions: string;
    formatter: (value: string | number) => string | number;
    placeholder: string;
    expanded: boolean;
    rounded: boolean;
    disabled: boolean;
    maxlength: number;
    checkScroll: boolean;
    debounce: number;
    keepFirst: boolean;
    clearOnSelect: boolean;
    openOnFocus: boolean;
    keepOpen: boolean;
    maxHeight: string | number;
    confirmKeys: unknown[];
    mobileModal: boolean;
    animation: string;
    selectOnClickOutside: boolean;
    selectableHeader: boolean;
    selectableFooter: boolean;
    icon: string;
    iconClickable: boolean;
    iconRight: string;
    iconRightClickable: boolean;
    iconRightVariant: string;
    clearable: boolean;
    clearIcon: string;
    autocomplete: string;
    teleport: string | boolean | Record<string, any>;
    itemClass: ComponentClass;
    itemHoverClass: ComponentClass;
    itemGroupTitleClass: ComponentClass;
    itemEmptyClass: ComponentClass;
    itemHeaderClass: ComponentClass;
    itemFooterClass: ComponentClass;
    inputClasses: Record<string, any>;
}, {}>, {
    header?(_: {}): any;
    group?(_: {
        group: any;
        index: number;
    }): any;
    default?(_: {
        option: any;
        value: string;
        index: number;
    }): any;
    empty?(_: {}): any;
    footer?(_: {}): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
