import { type PropType } from "vue";
import type { ComponentClass } from '../../types';
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<{
    /** Override existing theme classes completely */
    override: {
        type: BooleanConstructor;
        default: any;
    };
    /** @model */
    modelValue: {
        type: ArrayConstructor;
        default: () => any[];
    };
    /** Items data */
    data: {
        type: ArrayConstructor;
        default: () => any[];
    };
    /** Property of the object (if data is array of objects) to use as display text */
    field: {
        type: StringConstructor;
        default: string;
    };
    /** Property of the object (if `data` is array of objects) to use as display text of group */
    groupField: {
        type: StringConstructor;
        default: any;
    };
    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */
    groupOptions: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Vertical size of the input control
     * @values small, medium, large
     */
    size: {
        type: StringConstructor;
        default: () => unknown;
    };
    /**
     * Color of the each item
     * @values primary, info, success, warning, danger, and any other custom color
     */
    variant: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Limits the number of items, plus item counter */
    maxitems: {
        type: NumberConstructor;
        default: any;
    };
    /** Same as native maxlength, plus character counter */
    maxlength: {
        type: NumberConstructor;
        default: any;
    };
    /** Show counter when maxlength or maxtags props are passed */
    counter: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Opens a dropdown with choices when the input field is focused */
    openOnFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Keep open dropdown list after select */
    keepOpen: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Input placeholder */
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    /** Makes input full width when inside a grouped or addon field */
    expanded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Same as native input disabled */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Array of keys
     * (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)
     * which will add a item when typing
     */
    confirmKeys: {
        type: PropType<string[]>;
        default: () => string[];
    };
    /** Array of chars used to split when pasting a new string */
    separators: {
        type: PropType<string[]>;
        default: () => string[];
    };
    /** The first option will always be pre-selected (easier to just hit enter or tab) */
    keepFirst: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When autocomplete, it allow to add new items */
    allowNew: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allows adding the same item multiple time */
    allowDuplicates: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Add autocomplete feature (if true, any Autocomplete props may be used too) */
    allowAutocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allow removing last item when pressing given keys, if input is empty */
    removeOnKeys: {
        type: PropType<string[]>;
        default: () => string[];
    };
    /** Function to validate the value of the item before adding */
    beforeAdding: {
        type: PropType<(value: string) => boolean>;
        default: () => boolean;
    };
    /** Function to create a new item to push into v-model (items) */
    createItem: {
        type: PropType<(value: any) => any>;
        default: (item: any) => any;
    };
    /** Makes the component check if list reached scroll start or end and emit scroll events. */
    checkScroll: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Add close/delete button to the item */
    closable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /**
     * Icon pack to use
     * @values mdi, fa, fas and any other custom icon pack
     */
    iconPack: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Icon to be shown */
    icon: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Icon name of close icon on selected item */
    closeIcon: {
        type: StringConstructor;
        default: () => string;
    };
    /** Accessibility label for the close button */
    ariaCloseLabel: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Native options to use in HTML5 validation */
    autocomplete: {
        type: StringConstructor;
        default: () => string;
    };
    /** Enable html 5 native validation */
    useHtml5Validation: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** The message which is shown when a validation error occurs */
    validationMessage: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Append the component to another part of the DOM.
     * Set `true` to append the component to the body.
     * In addition, any CSS selector string or an actual DOM node can be used.
     */
    teleport: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor)[];
        default: () => boolean;
    };
    /** Class of the root element */
    rootClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of input when expanded */
    expandedClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the input container */
    containerClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the input container size */
    sizeClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the entered item variant */
    variantClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the close button of entered item */
    closeClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the entered item */
    itemClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the counter element */
    counterClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /**
     * Class configuration for the underlying autocomplete component
     * @ignore
     */
    autocompleteClasses: {
        type: ObjectConstructor;
        default: () => {};
    };
}, {
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: any[]) => void;
    input: (value: any) => void;
    add: (value: any) => void;
    remove: (value: any) => void;
    focus: (event: Event) => void;
    blur: (event: Event) => void;
    invalid: (event: Event) => void;
    "icon-click": (event: Event) => void;
    "icon-right-click": (event: Event) => void;
    "scroll-start": () => void;
    "scroll-end": () => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /** Override existing theme classes completely */
    override: {
        type: BooleanConstructor;
        default: any;
    };
    /** @model */
    modelValue: {
        type: ArrayConstructor;
        default: () => any[];
    };
    /** Items data */
    data: {
        type: ArrayConstructor;
        default: () => any[];
    };
    /** Property of the object (if data is array of objects) to use as display text */
    field: {
        type: StringConstructor;
        default: string;
    };
    /** Property of the object (if `data` is array of objects) to use as display text of group */
    groupField: {
        type: StringConstructor;
        default: any;
    };
    /** Property of the object (if `data` is array of objects) to use as key to get items array of each group */
    groupOptions: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Vertical size of the input control
     * @values small, medium, large
     */
    size: {
        type: StringConstructor;
        default: () => unknown;
    };
    /**
     * Color of the each item
     * @values primary, info, success, warning, danger, and any other custom color
     */
    variant: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Limits the number of items, plus item counter */
    maxitems: {
        type: NumberConstructor;
        default: any;
    };
    /** Same as native maxlength, plus character counter */
    maxlength: {
        type: NumberConstructor;
        default: any;
    };
    /** Show counter when maxlength or maxtags props are passed */
    counter: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Opens a dropdown with choices when the input field is focused */
    openOnFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Keep open dropdown list after select */
    keepOpen: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Input placeholder */
    placeholder: {
        type: StringConstructor;
        default: any;
    };
    /** Makes input full width when inside a grouped or addon field */
    expanded: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Same as native input disabled */
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    /**
     * Array of keys
     * (https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)
     * which will add a item when typing
     */
    confirmKeys: {
        type: PropType<string[]>;
        default: () => string[];
    };
    /** Array of chars used to split when pasting a new string */
    separators: {
        type: PropType<string[]>;
        default: () => string[];
    };
    /** The first option will always be pre-selected (easier to just hit enter or tab) */
    keepFirst: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** When autocomplete, it allow to add new items */
    allowNew: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allows adding the same item multiple time */
    allowDuplicates: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Add autocomplete feature (if true, any Autocomplete props may be used too) */
    allowAutocomplete: {
        type: BooleanConstructor;
        default: boolean;
    };
    /** Allow removing last item when pressing given keys, if input is empty */
    removeOnKeys: {
        type: PropType<string[]>;
        default: () => string[];
    };
    /** Function to validate the value of the item before adding */
    beforeAdding: {
        type: PropType<(value: string) => boolean>;
        default: () => boolean;
    };
    /** Function to create a new item to push into v-model (items) */
    createItem: {
        type: PropType<(value: any) => any>;
        default: (item: any) => any;
    };
    /** Makes the component check if list reached scroll start or end and emit scroll events. */
    checkScroll: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** Add close/delete button to the item */
    closable: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /**
     * Icon pack to use
     * @values mdi, fa, fas and any other custom icon pack
     */
    iconPack: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Icon to be shown */
    icon: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Icon name of close icon on selected item */
    closeIcon: {
        type: StringConstructor;
        default: () => string;
    };
    /** Accessibility label for the close button */
    ariaCloseLabel: {
        type: StringConstructor;
        default: () => unknown;
    };
    /** Native options to use in HTML5 validation */
    autocomplete: {
        type: StringConstructor;
        default: () => string;
    };
    /** Enable html 5 native validation */
    useHtml5Validation: {
        type: BooleanConstructor;
        default: () => boolean;
    };
    /** The message which is shown when a validation error occurs */
    validationMessage: {
        type: StringConstructor;
        default: any;
    };
    /**
     * Append the component to another part of the DOM.
     * Set `true` to append the component to the body.
     * In addition, any CSS selector string or an actual DOM node can be used.
     */
    teleport: {
        type: (ObjectConstructor | BooleanConstructor | StringConstructor)[];
        default: () => boolean;
    };
    /** Class of the root element */
    rootClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of input when expanded */
    expandedClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the input container */
    containerClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the input container size */
    sizeClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the entered item variant */
    variantClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the close button of entered item */
    closeClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the entered item */
    itemClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /** Class of the counter element */
    counterClass: {
        type: PropType<ComponentClass>;
        default: any;
    };
    /**
     * Class configuration for the underlying autocomplete component
     * @ignore
     */
    autocompleteClasses: {
        type: ObjectConstructor;
        default: () => {};
    };
}>> & {
    onInput?: (value: any) => any;
    onBlur?: (event: Event) => any;
    onFocus?: (event: Event) => any;
    onInvalid?: (event: Event) => any;
    "onUpdate:modelValue"?: (value: any[]) => any;
    "onIcon-click"?: (event: Event) => any;
    "onIcon-right-click"?: (event: Event) => any;
    "onScroll-start"?: () => any;
    "onScroll-end"?: () => any;
    onAdd?: (value: any) => any;
    onRemove?: (value: any) => any;
}, {
    data: unknown[];
    size: string;
    override: boolean;
    iconPack: string;
    useHtml5Validation: boolean;
    modelValue: unknown[];
    field: string;
    variant: string;
    rootClass: ComponentClass;
    validationMessage: string;
    groupField: string;
    groupOptions: string;
    placeholder: string;
    expanded: boolean;
    disabled: boolean;
    maxlength: number;
    checkScroll: boolean;
    keepFirst: boolean;
    openOnFocus: boolean;
    keepOpen: boolean;
    confirmKeys: string[];
    icon: string;
    autocomplete: string;
    teleport: string | boolean | Record<string, any>;
    itemClass: ComponentClass;
    expandedClass: ComponentClass;
    sizeClass: ComponentClass;
    variantClass: ComponentClass;
    counter: boolean;
    counterClass: ComponentClass;
    closeIcon: string;
    closeClass: ComponentClass;
    ariaCloseLabel: string;
    closable: boolean;
    maxitems: number;
    separators: string[];
    allowNew: boolean;
    allowDuplicates: boolean;
    allowAutocomplete: boolean;
    removeOnKeys: string[];
    beforeAdding: (value: string) => boolean;
    createItem: (value: any) => any;
    containerClass: ComponentClass;
    autocompleteClasses: Record<string, any>;
}, {}>, {
    selected?(_: {
        items: any[];
    }): any;
    header?(_: {}): any;
    default?(_: {
        option: any;
        index: number;
        value: string;
    }): any;
    empty?(_: {}): any;
    footer?(_: {}): any;
    counter?(_: {
        items: number;
        total: number;
    }): any;
}>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
