{"version":3,"file":"Field.vue_vue_type_script_setup_true_lang-DbaNx2is.cjs","sources":["../../src/components/field/FieldBody.vue","../../src/components/field/Field.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n    defineComponent,\n    h,\n    resolveComponent,\n    Comment,\n    Text,\n    useSlots,\n    type PropType,\n} from \"vue\";\n\nimport { injectField } from \"./useFieldShare\";\n\nimport type { ClassBind } from \"@/types\";\n\nexport default defineComponent({\n    name: \"OFieldBody\",\n    configField: \"field\",\n    props: {\n        classes: {\n            type: Array as PropType<ClassBind[]>,\n            default: undefined,\n        },\n    },\n    setup(props) {\n        // inject parent field component if used inside one\n        const { parentField } = injectField();\n\n        const slots = useSlots();\n\n        return () => {\n            let first = true;\n            const slot = slots.default();\n            const children =\n                slot.length === 1 && Array.isArray(slot[0].children)\n                    ? slot[0].children\n                    : slot;\n            return h(\n                \"div\",\n                { class: props.classes },\n                children.map((element: any) => {\n                    let message;\n                    if (element.type === Comment || element.type === Text) {\n                        return element;\n                    }\n                    if (first) {\n                        message = parentField.value.fieldMessage;\n                        first = false;\n                    }\n                    return h(\n                        resolveComponent(\"OField\"),\n                        {\n                            variant: parentField.value.fieldVariant,\n                            message,\n                        },\n                        () => [element],\n                    );\n                }),\n            );\n        };\n    },\n});\n</script>\n","<script setup lang=\"ts\">\nimport { computed, ref, useSlots, watch, type PropType } from \"vue\";\n\nimport OFieldBody from \"./FieldBody.vue\";\n\nimport { getOption } from \"@/utils/config\";\nimport { defineClasses, useMatchMedia } from \"@/composables\";\n\nimport { injectField, provideField } from \"../field/useFieldShare\";\n\nimport type { ComponentClass } from \"@/types\";\n\n/**\n * Fields are used to add functionality to controls and to attach/group components and elements together\n * @displayName Field\n * @style _field.scss\n */\ndefineOptions({\n    isOruga: true,\n    name: \"OField\",\n    configField: \"field\",\n});\n\nconst props = defineProps({\n    /** Override existing theme classes completely */\n    override: { type: Boolean, default: undefined },\n    /**\n     * Color of the field and help message, also adds a matching icon.\n     * Used by Input, Select and Autocomplete.\n     * @values primary, info, success, warning, danger, and any other custom color\n     */\n    variant: { type: String, default: undefined },\n    /** Field label */\n    label: { type: String, default: undefined },\n    /**\n     * Vertical size of input\n     * @values small, medium, large\n     */\n    labelSize: {\n        type: String,\n        default: () => getOption(\"field.labelsize\"),\n    },\n    /** Same as native for set on the label */\n    labelFor: { type: String, default: undefined },\n    /** Help message text */\n    message: { type: String, default: undefined },\n    /**\n     * Direct child components/elements of Field will be grouped horizontally\n     * (see which ones at the top of the page).\n     */\n    grouped: { type: Boolean, default: false },\n    /** Allow controls to fill up multiple lines, making it responsive */\n    groupMultiline: { type: Boolean, default: false },\n    /** Group label and control on the same line for horizontal forms */\n    horizontal: { type: Boolean, default: false },\n    /** Field automatically attach controls together */\n    addons: { type: Boolean, default: true },\n    /** Mobile breakpoint as max-width value */\n    mobileBreakpoint: {\n        type: String,\n        default: () => getOption(\"field.mobileBreakpoint\"),\n    },\n    // class props (will not be displayed in the docs)\n    /** Class of the root element */\n    rootClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class to align label and control in horizontal forms */\n    horizontalClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class when fields are grouped together */\n    groupedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class when fields fill up multiple lines */\n    groupMultilineClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field label */\n    labelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field label size */\n    labelSizeClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field label when horizontal */\n    labelHorizontalClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for field body */\n    bodyClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** \"Class for field body when horizontal */\n    bodyHorizontalClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for components automatically attached together when inside a field */\n    addonsClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the field message */\n    messageClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the message field variant */\n    variantMessageClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of the label field variant */\n    variantLabelClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class of file component when on mobile */\n    mobileClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the focused field */\n    focusedClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n    /** Class for the filled field */\n    filledClass: {\n        type: [String, Array, Function] as PropType<ComponentClass>,\n        default: undefined,\n    },\n});\n\nconst { isMobile } = useMatchMedia(props.mobileBreakpoint);\n\n/** Set internal variant when prop change. */\nconst fieldVariant = ref(props.variant);\nwatch(\n    () => props.variant,\n    (v) => (fieldVariant.value = v),\n);\n\n/** Set internal message when prop change. */\nconst fieldMessage = ref(props.message);\nwatch(\n    () => props.message,\n    (v) => (fieldMessage.value = v),\n);\n\n/** this can be set from outside to update the focus state. */\nconst isFocused = ref(false);\n/** this can be set from outside to update the filled state. */\nconst isFilled = ref(false);\n\n// inject parent field component if used inside one\nconst { parentField } = injectField();\n\n/** Set parent message if we use Field in Field. */\nwatch(\n    () => fieldMessage.value,\n    (value) => {\n        if (parentField?.value?.hasInnerField) {\n            if (!parentField.value.fieldVariant)\n                parentField.value.setVariant(fieldVariant.value);\n            if (!parentField.value.fieldMessage)\n                parentField.value.setMessage(value);\n        }\n    },\n);\n\nconst slots = useSlots();\n\nconst hasLabel = computed(() => props.label || !!slots.label);\n\nconst hasMessage = computed(\n    () =>\n        !!(!parentField?.value?.hasInnerField && fieldMessage.value) ||\n        !!slots.message,\n);\n\nconst hasInnerField = computed(\n    () => props.grouped || props.groupMultiline || hasAddons(),\n);\n\nfunction hasAddons(): boolean {\n    if (!props.addons || props.horizontal) return false;\n\n    let renderedNode = 0;\n    // [Vue warn]: Slot \"default\" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.\n    const slot = slots.default();\n    if (slot) {\n        const children =\n            slot.length === 1 && Array.isArray(slot[0].children)\n                ? slot[0].children\n                : slot;\n        renderedNode = children.filter((n) => !!n).length;\n    }\n    return renderedNode > 1 && props.addons && !props.horizontal;\n}\n\n// --- Field Dependency Injection Feature ---\n\nconst rootRef = ref();\n\nfunction setFocus(value: boolean): void {\n    isFocused.value = value;\n}\nfunction setFilled(value: boolean): void {\n    isFilled.value = value;\n}\nfunction setVariant(value: string): void {\n    fieldVariant.value = value;\n}\nfunction setMessage(value: string): void {\n    fieldMessage.value = value;\n}\n\n// Provided data is a computed ref to enjure reactivity.\nconst provideData = computed(() => ({\n    $el: rootRef.value,\n    props,\n    hasInnerField: hasInnerField.value,\n    hasMessage: hasMessage.value,\n    fieldVariant: fieldVariant.value,\n    fieldMessage: fieldMessage.value,\n    setFocus,\n    setFilled,\n    setVariant,\n    setMessage,\n}));\n\n// Provide field component data via dependency injection.\nprovideField(provideData);\n\n// --- Computed Component Classes ---\n\nconst rootClasses = defineClasses(\n    [\"rootClass\", \"o-field\"],\n    [\n        \"horizontalClass\",\n        \"o-field--horizontal\",\n        null,\n        computed(() => !!props.horizontal),\n    ],\n    [\"mobileClass\", \"o-field--mobile\", null, isMobile],\n    [\"focusedClass\", \"o-field--focused\", null, isFocused],\n    [\"filledClass\", \"o-field--filled\", null, isFilled],\n);\n\nconst messageClasses = defineClasses(\n    [\"messageClass\", \"o-field__message\"],\n    [\n        \"variantMessageClass\",\n        \"o-field__message-\",\n        fieldVariant,\n        computed(() => !!fieldVariant.value),\n    ],\n);\n\nconst labelClasses = defineClasses(\n    [\"labelClass\", \"o-field__label\"],\n    [\n        \"labelSizeClass\",\n        \"o-field__label-\",\n        computed(() => props.labelSize),\n        computed(() => !!props.labelSize),\n    ],\n    [\n        \"variantLabelClass\",\n        \"o-field__label-\",\n        fieldVariant,\n        computed(() => !!fieldVariant.value),\n    ],\n);\n\nconst labelHorizontalClasses = defineClasses([\n    \"labelHorizontalClass\",\n    \"o-field__horizontal-label\",\n]);\n\nconst bodyClasses = defineClasses([\"bodyClass\", \"o-field__body\"]);\n\nconst bodyHorizontalClasses = defineClasses([\n    \"bodyHorizontalClass\",\n    \"o-field__horizontal-body\",\n]);\n\nconst innerFieldClasses = defineClasses(\n    [\"rootClass\", \"o-field\"],\n    [\n        \"groupMultilineClass\",\n        \"o-field--grouped-multiline\",\n        null,\n        computed(() => props.groupMultiline),\n    ],\n\n    [\"groupedClass\", \"o-field--grouped\", null, computed(() => props.grouped)],\n    [\n        \"addonsClass\",\n        \"o-field--addons\",\n        null,\n        computed(() => !props.grouped && hasAddons()),\n    ],\n);\n</script>\n\n<template>\n    <div ref=\"rootRef\" data-oruga=\"field\" :class=\"rootClasses\">\n        <div v-if=\"horizontal\" :class=\"labelHorizontalClasses\">\n            <label v-if=\"hasLabel\" :for=\"labelFor\" :class=\"labelClasses\">\n                <!--\n                    @slot Override the label\n                -->\n                <slot name=\"label\">{{ label }}</slot>\n            </label>\n        </div>\n        <template v-else>\n            <label v-if=\"hasLabel\" :for=\"labelFor\" :class=\"labelClasses\">\n                <!--\n                    @slot Override the label\n                -->\n                <slot name=\"label\">{{ label }}</slot>\n            </label>\n        </template>\n\n        <o-field-body v-if=\"horizontal\" :classes=\"bodyHorizontalClasses\">\n            <!--\n                @slot Default content\n            -->\n            <slot />\n        </o-field-body>\n\n        <div v-else-if=\"hasInnerField\" :class=\"bodyClasses\">\n            <div :class=\"innerFieldClasses\">\n                <!--\n                   @slot Default content\n                -->\n                <slot />\n            </div>\n        </div>\n\n        <template v-else>\n            <!--\n                @slot Default content\n            -->\n            <slot />\n        </template>\n\n        <p v-if=\"hasMessage && !horizontal\" :class=\"messageClasses\">\n            <!--\n                @slot Override the message\n            -->\n            <slot name=\"message\"> {{ fieldMessage }} </slot>\n        </p>\n    </div>\n</template>\n"],"names":["defineComponent","injectField","useSlots","h","Comment","Text","resolveComponent","useMatchMedia","ref","watch","computed","provideField","defineClasses"],"mappings":"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"}