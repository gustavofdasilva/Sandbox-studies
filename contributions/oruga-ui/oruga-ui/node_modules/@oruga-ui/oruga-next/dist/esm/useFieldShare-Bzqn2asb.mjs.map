{"version":3,"file":"useFieldShare-Bzqn2asb.mjs","sources":["../../src/components/field/useFieldShare.ts"],"sourcesContent":["import { computed, inject, provide, type ComputedRef } from \"vue\";\n\nimport Field from \"./Field.vue\";\nimport { getOption } from \"@/utils/config\";\n\nexport type FieldProps = InstanceType<typeof Field>[\"$props\"];\n\ntype FieldData = {\n    $el: Element;\n    props: FieldProps;\n    hasInnerField: boolean;\n    hasMessage: boolean;\n    fieldVariant: string;\n    fieldMessage: string;\n    setFocus: (value: boolean) => void;\n    setFilled: (value: boolean) => void;\n    setVariant: (value: string) => void;\n    setMessage: (value: string) => void;\n};\n\n/** provide/inject key */\nconst $field = Symbol();\n\n/** provide/inject type */\ntype ProvidedField = ComputedRef<FieldData>;\n\n/**\n * Provide field component data via dependency injection.\n * Provided data is a computed ref to enjure reactivity.\n */\nexport function provideField(data: ProvidedField): void {\n    provide<ProvidedField>($field, data);\n}\n\n/** Inject parent field component if used inside one. **/\nexport function injectField() {\n    const parentField = inject<ProvidedField>($field, undefined);\n\n    /**\n     * Get the type prop from parent if it's a Field.\n     */\n    const statusVariant = computed(() => {\n        if (!parentField?.value) return undefined;\n        else if (!parentField.value.fieldVariant) return undefined;\n        else {\n            if (typeof parentField.value.fieldVariant === \"string\") {\n                return parentField.value.fieldVariant;\n            } else if (Array.isArray(parentField.value.fieldVariant)) {\n                for (const key in parentField.value.fieldVariant as any) {\n                    if (parentField.value.fieldVariant[key]) {\n                        return key;\n                    }\n                }\n            }\n        }\n        return undefined;\n    });\n\n    /**\n     * Get the message prop from parent if it's a Field.\n     */\n    const statusMessage = computed(() =>\n        !parentField.value\n            ? parentField.value.fieldMessage || parentField.value.hasMessage\n            : \"\",\n    );\n\n    /**\n     * Icon name based on the variant.\n     */\n    const statusVariantIcon = computed(() => {\n        const statusVariantIcon = getOption(\"statusVariantIcon\", {\n            success: \"check\",\n            danger: \"alert-circle\",\n            info: \"information\",\n            warning: \"alert\",\n        });\n        return statusVariantIcon[statusVariant.value] || \"\";\n    });\n\n    return {\n        parentField,\n        statusVariant,\n        statusVariantIcon,\n        statusMessage,\n    };\n}\n"],"names":["statusVariantIcon"],"mappings":";;;AAqBA,MAAM,SAAS,OAAO;AASf,SAAS,aAAa,MAA2B;AACpD,UAAuB,QAAQ,IAAI;AACvC;AAGO,SAAS,cAAc;AACpB,QAAA,cAAc,OAAsB,QAAQ,MAAS;AAKrD,QAAA,gBAAgB,SAAS,MAAM;AACjC,QAAI,EAAC,2CAAa;AAAc,aAAA;AAAA,aACvB,CAAC,YAAY,MAAM;AAAqB,aAAA;AAAA,SAC5C;AACD,UAAI,OAAO,YAAY,MAAM,iBAAiB,UAAU;AACpD,eAAO,YAAY,MAAM;AAAA,MAAA,WAClB,MAAM,QAAQ,YAAY,MAAM,YAAY,GAAG;AAC3C,mBAAA,OAAO,YAAY,MAAM,cAAqB;AACrD,cAAI,YAAY,MAAM,aAAa,GAAG,GAAG;AAC9B,mBAAA;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACO,WAAA;AAAA,EAAA,CACV;AAKD,QAAM,gBAAgB;AAAA,IAAS,MAC3B,CAAC,YAAY,QACP,YAAY,MAAM,gBAAgB,YAAY,MAAM,aACpD;AAAA,EAAA;AAMJ,QAAA,oBAAoB,SAAS,MAAM;AAC/BA,UAAAA,qBAAoB,UAAU,qBAAqB;AAAA,MACrD,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,IAAA,CACZ;AACMA,WAAAA,mBAAkB,cAAc,KAAK,KAAK;AAAA,EAAA,CACpD;AAEM,SAAA;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAER;"}